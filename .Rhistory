wordcloud(df$word,df$freq, min.freq = 5,
max.words=100, random.order=FALSE, rot.per=0.35, colors = rainbow(4))
school_data = clean_phil_data %>%
filter(school == 'empiricm') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
school_data = clean_phil_data %>%
filter(school == 'empiricism') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1689", "1710", "1713", "1739", "1779")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
commonality.cloud(matrix, max.words = 200, colors = rainbow(4), random.order=FALSE)
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'feminism') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1792", "1949", "1981")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'german_idealism') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1781", "1788", "1790", "1798", "1807", "1817", "1820")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'nietzsche') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1886", "1887", "1888")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'phenomenology') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1907", "1927", "1936", "1945", "1950")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
wordcloud(df$word,df$freq, min.freq = 5,
max.words=100, random.order=FALSE, rot.per=0.35, colors = rainbow(4))
school_data = clean_phil_data %>%
filter(school == 'plato') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("Plato")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
matrix = as.matrix(dtm)
colnames(matrix) = c("-320")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
matrix = as.matrix(dtm)
colnames(matrix) = c("-320")
words <- sort(rowSums(matrix),decreasing=TRUE)
df <- data.frame(word = names(words),freq=words)
wordcloud(df$word,df$freq, min.freq = 5,
max.words=100, random.order=FALSE, rot.per=0.35, colors = rainbow(4))
school_data = clean_phil_data %>%
filter(school == 'rationalism') %>%
select(text, original_publication_date)
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1637", "1641", "1674", "1677", "1710")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'stoicism') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("125", "170")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library("readr")
rm(list = ls())
library("here")
philosophy_data = read_csv(here::here("data", "philosophy_data.csv"))
setwd("~/Documents/COLUMBIA COURSEWORK/Spring 23/Applied Data Science/ads-spring2023-project1-SrushtiSanghavi")
philosophy_data = read_csv(here::here("data", "philosophy_data.csv"))
library("here")
philosophy_data = read_csv(here::here("data", "philosophy_data.csv"))
setwd("~/Documents/COLUMBIA COURSEWORK/Spring 23/Applied Data Science/ads-spring2023-project1-SrushtiSanghavi")
philosophy_data = read.csv("/data/philosophy_data.csv")
getwd()
setwd("~/Documents/COLUMBIA COURSEWORK/Spring 23/Applied Data Science/ads-spring2023-project1-SrushtiSanghavi")
philosophy_data = read.csv("/data/philosophy_data.csv")
getwd()
setwd('/Users/srushtisanghavi/Documents/COLUMBIA COURSEWORK/Spring 23/Applied Data Science/ads-spring2023-project1-SrushtiSanghavi')
setwd('/Users/srushtisanghavi/Documents/COLUMBIA COURSEWORK/Spring 23/Applied Data Science/ads-spring2023-project1-SrushtiSanghavi')
setwd('/Users/srushtisanghavi/Documents/COLUMBIA COURSEWORK/Spring 23/Applied Data Science/ads-spring2023-project1-SrushtiSanghavi')
philosophy_data = read.csv("/data/philosophy_data.csv")
getwd()
philosophy_data = read.csv("../philosophy_data.csv")
philosophy_data = read.csv("../data/philosophy_data.csv")
clean_data = philosophy_data
clean_data$sentence_lowered = gsub("[[:punct:]]", "", clean_data$sentence_lowered) # Remove punctuation
clean_data$sentence_lowered = removeWords(clean_data$sentence_lowered, stop_words$word) # Remove stopwords
clean_data$sentence_lowered  = gsub("\\s+"," ",clean_data$sentence_lowered) # Remove extra space
cleaned_philosophy_data = select(clean_data, c(1,2,3,6,8,9))
colnames(cleaned_philosophy_data)[6] <- "text"
write.csv(cleaned_philosophy_data,file='../output/cleaned_philosophy_data.csv', row.names=FALSE)
clean_phil_data = read.csv('../output/cleaned_philosophy_data.csv')
rm(list = ls())
clean_phil_data = read.csv('../output/cleaned_philosophy_data.csv')
school_data = clean_phil_data %>%
filter(school == 'stoicism') %>%
select(text, original_publication_date)
# Creating a character vector list of text and year
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english") # Stemming
# Creating a Document Term Matrix
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("125", "170")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
school_data = clean_phil_data %>%
filter(school == 'stoicism') %>%
select(text, original_publication_date)
# Creating a character vector list of text and year
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english") # Stemming
# Creating a Document Term Matrix
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("125", "170")
# Word cloud comparing text for different years
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
comparison.cloud(matrix, max.words = 200, title.size = 2, random.order=FALSE)
comparison.cloud(matrix, max.words = 300, title.size = 2, random.order=FALSE)
comparison.cloud(matrix, max.words = 300, title.size = 2, random.order=FALSE, rot.per=0.35, colors = rainbow())
comparison.cloud(matrix, max.words = 300, title.size = 2, random.order=FALSE, rot.per=0.3)
```{r include = FALSE}
school_data = clean_phil_data %>%
filter(school == 'rationalism') %>%
select(text, original_publication_date)
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1637", "1641", "1674", "1677", "1710")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
capitalism_school_data = clean_phil_data %>%
filter(school == 'capitalism') %>%
select(text, original_publication_date)
# Create corpus of text year-wise
capitalism_year_data = split(capitalism_school_data$text,capitalism_school_data$original_publication_date)
class(capitalism_year_data)
capitalism1 = lapply(capitalism_year_data, FUN = paste, collapse= " ")
class(capitalism1)
# Creating a Corpus
capitalism_corpus = Corpus(VectorSource(capitalism1))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
capitalism_corpus  = tm_map(capitalism_corpus, content_transformer(stemDocument), language = "english")
capitalism_dtm = TermDocumentMatrix(capitalism_corpus)
capitalism_dtm
capitalism_matrix = as.matrix(capitalism_dtm)
colnames(capitalism_matrix) = c("1776", "1817", "1936")
comparison.cloud(capitalism_matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'stoicism') %>%
select(text, original_publication_date)
# Creating a character vector list of text and year
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english") # Stemming
# Creating a Document Term Matrix
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("125", "170")
comparison.cloud(matrix, max.words = 300, title.size = 2, random.order=FALSE, rot.per=0.35)
capitalism_school_data = clean_phil_data %>%
filter(school == 'capitalism') %>%
select(text, original_publication_date)
# Create corpus of text year-wise
capitalism_year_data = split(capitalism_school_data$text,capitalism_school_data$original_publication_date)
class(capitalism_year_data)
capitalism1 = lapply(capitalism_year_data, FUN = paste, collapse= " ")
class(capitalism1)
# Creating a Corpus
capitalism_corpus = Corpus(VectorSource(capitalism1))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
capitalism_corpus  = tm_map(capitalism_corpus, content_transformer(stemDocument), language = "english")
capitalism_dtm = TermDocumentMatrix(capitalism_corpus)
capitalism_dtm
capitalism_matrix = as.matrix(capitalism_dtm)
colnames(capitalism_matrix) = c("1776", "1817", "1936")
comparison.cloud(capitalism_matrix, max.words = 500, title.size = 2, random.order=FALSE, rot.per=0.35)
install.packages("magick")
library("magick")
install.packages("magick")
imagepath <- system.file('../figs/phil.png', package='imager')
pic <- load.image(imagepath)
library("readbitmap")
install.packages("readbitmap")
library("readbitmap")
imagepath <- system.file('../figs/phil.png', package='imager')
pic <- load.image(imagepath)
library("imager")
install.packages("imager")
library("imager")
imagepath <- system.file('../figs/phil.png', package='imager')
pic <- load.image(imagepath)
pic = load(imagepath)
library("imager")
install.packages("imager")
library("imager")
library("wordcloud2")
install.packages("wordcloud2") # word-cloud shape generator
library("wordcloud2")
comparison.cloud(capitalism_matrix, max.words = 500, title.size = 2, random.order=FALSE, rot.per=0.35, shape = 'star')
capitalism_school_data = clean_phil_data %>%
filter(school == 'capitalism') %>%
select(text, original_publication_date)
# Create corpus of text year-wise
capitalism_year_data = split(capitalism_school_data$text,capitalism_school_data$original_publication_date)
class(capitalism_year_data)
capitalism1 = lapply(capitalism_year_data, FUN = paste, collapse= " ")
class(capitalism1)
# Creating a Corpus
capitalism_corpus = Corpus(VectorSource(capitalism1))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
capitalism_corpus  = tm_map(capitalism_corpus, content_transformer(stemDocument), language = "english")
capitalism_dtm = TermDocumentMatrix(capitalism_corpus)
capitalism_dtm
capitalism_matrix = as.matrix(capitalism_dtm)
colnames(capitalism_matrix) = c("1776", "1817", "1936")
comparison.cloud(capitalism_matrix, max.words = 500, title.size = 2, random.order=FALSE, rot.per=0.35, shape = 'pentagon')
wordcloud2(capitalism_matrix, max.words = 500, title.size = 2, random.order=FALSE, rot.per=0.35, shape = 'pentagon')
wordcloud2(capitalism_matrix, shape = 'pentagon')
comparison.cloud(capitalism_matrix, max.words = 500, title.size = 2, random.order=FALSE, rot.per=0.35)
school_data = clean_phil_data %>%
filter(school == 'feminism') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1792", "1949", "1981")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE, max.size = 20)
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE, max.size = 10)
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'communism') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1848", "1862", "1883")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'analytic') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1910", "1912", "1921", "1950", "1953", "1959", "1972", "1975", "1985")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'capitalism') %>%
select(text, original_publication_date)
# Create corpus of text year-wise
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1776", "1817", "1936")
```{r echo = FALSE}
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE, rot.per=0.35)
school_data = clean_phil_data %>%
filter(school == 'continental') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1961", "1963", "1966", "1967", "1968", "1972")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
school_data = clean_phil_data %>%
filter(school == 'analytic') %>%
select(text, original_publication_date)
# Creating a character vector list
year_data = split(school_data$text,school_data$original_publication_date)
class(year_data)
text_year = lapply(year_data, FUN = paste, collapse= " ")
class(text_year)
# Creating a Corpus
corpus = Corpus(VectorSource(text_year))
# Stemming - replacing a word with its most basic conjugate form. For example the stem of the word “typing” is “type.”
corpus  = tm_map(corpus, content_transformer(stemDocument), language = "english")
dtm = TermDocumentMatrix(corpus)
matrix = as.matrix(dtm)
colnames(matrix) = c("1910", "1912", "1921", "1950", "1953", "1959", "1972", "1975", "1985")
comparison.cloud(matrix, max.words = 500, title.size = 2, random.order=FALSE)
detach("package:wordcloud2", unload = TRUE)
detach("package:wordcloud", unload = TRUE)
remove.packages("wordcloud")
remove.packages("wordcloud2")
remove.packages("here")
##1. Required Packages & Libraries for Data Processing and Analysis
#install.packages("tidyverse")
#install.packages("tidytext")
#install.packages("tm")  # for text mining
#install.packages("wordcloud") # word-cloud generator
#install.packages("RColorBrewer") # color palettes
packages.used=as.list(
c(
"tidyverse",
"tidytext",
"tm",
"RColorBrewer",
"wordcloud")
)
check.pkg = function(x){
if(!require(x, character.only=T)) install.packages(x,
character.only=T,
dependence=T)
}
lapply(packages.used, check.pkg)
# Load required libraries
library("tidytext")
library("tm")
library("wordcloud")
install.packages(x, character.only = T, dependence = T)
##1. Required Packages & Libraries for Data Processing and Analysis
#install.packages("tidyverse")
#install.packages("tidytext")
#install.packages("tm")  # for text mining
#install.packages("wordcloud") # word-cloud generator
#install.packages("RColorBrewer") # color palettes
packages.used = c(
"tidyverse",
"tidytext",
"tm",
"RColorBrewer",
"wordcloud")
new.packages <- packages.used[!(packages.used %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
# Load required libraries
library("tidytext")
library("tm")
library("wordcloud")
install.packages(new.packages)
include_graphics('../figs/phil.png')
install.packages("knitr")
install.packages("knitr")
library("knitr")
library(knitr)
remove.packages("knitr")
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library("knitr")
include_graphics('../figs/phil.png')
include_graphics('../figs/phil.png')
include_graphics('../figs/phil.png')
include_graphics('../figs/phil.jpeg')
include_graphics('../figs/phil.jpeg')
include_graphics('../figs/phil.jpeg')
include_graphics('../figs/phil.png')
# Word cloud comparing text for different years
comparison.cloud(matrix, max.words = 300, title.size = 2, random.order=FALSE, rot.per=0.35)
# Filtering for each school
school_data = clean_phil_data %>%
filter(school == 'stoicism') %>%
select(text, original_publication_date)
# Reading Image from the figs folder
#include_graphics('../figs/phil.png')
include_graphics("https://s3-eu-central-1.amazonaws.com/cartoons-s3/styles/product_detail_image/s3/cartoons/2012/11/philosophy_through_the_centuries__sofia_mamalinga.jpg?itok=ODt06UoL")
include_graphics("https://images.squarespace-cdn.com/content/v1/57125c2c2b8dde54a34b537f/1615987424829-HIZ9FRLRQ7CC9A8XVQAP/img-ancient-greek-philosophers.jpg?format=2500w")
